name: Build Windows Executable

on:
  push:
    branches: [main, master]
    tags: ["v*"]
  pull_request:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      version_type:
        description: "Version bump type"
        required: true
        default: "patch"
        type: choice
        options:
          - major
          - minor
          - patch
          - none
      create_release:
        description: "Create GitHub release"
        required: true
        default: true
        type: boolean

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Get version info
        id: version
        run: |
          $version = "1.0.0"
          $tag = "v$version"

          # Check if this is a tag push
          if ("${{ github.ref }}" -like "refs/tags/v*") {
            $tag = "${{ github.ref_name }}"
            $version = $tag.TrimStart("v")
          }
          # Check for manual version bump
          elseif ("${{ github.event.inputs.version_type }}" -ne "none" -and "${{ github.event.inputs.version_type }}" -ne "") {
            # Simple version bump logic
            $parts = $version.Split(".")
            switch ("${{ github.event.inputs.version_type }}") {
              "major" { $parts[0] = [int]$parts[0] + 1; $parts[1] = "0"; $parts[2] = "0" }
              "minor" { $parts[1] = [int]$parts[1] + 1; $parts[2] = "0" }
              "patch" { $parts[2] = [int]$parts[2] + 1 }
            }
            $version = $parts -join "."
            $tag = "v$version"
          }

          echo "version=$version" >> $env:GITHUB_OUTPUT
          echo "tag=$tag" >> $env:GITHUB_OUTPUT
          echo "Version: $version"
          echo "Tag: $tag"

      - name: Update version in main.py
        run: |
          $version = "${{ steps.version.outputs.version }}"
          if (Test-Path "main.py") {
            (Get-Content "main.py") -replace 'setApplicationVersion\(".*?"\)', "setApplicationVersion(`"$version`")" | Set-Content "main.py"
          }

      - name: Build GUI executable
        run: |
          pyinstaller --clean ZedUpdater.spec

      - name: Create console version spec
        run: |
          # Create console version by copying and modifying the spec file
          $spec = Get-Content "ZedUpdater.spec"
          $spec = $spec -replace "console=False", "console=True"
          $spec = $spec -replace "name='ZedUpdater'", "name='ZedUpdater-Console'"
          $spec | Set-Content "ZedUpdater-Console.spec"

      - name: Build console executable
        run: |
          pyinstaller --clean ZedUpdater-Console.spec

      - name: Verify builds
        run: |
          if (Test-Path "dist\ZedUpdater.exe") {
            echo "GUI executable: $(Get-Item 'dist\ZedUpdater.exe' | Select-Object -ExpandProperty Length) bytes"
          } else {
            echo "ERROR: GUI executable not found"
            exit 1
          }

          if (Test-Path "dist\ZedUpdater-Console.exe") {
            echo "Console executable: $(Get-Item 'dist\ZedUpdater-Console.exe' | Select-Object -ExpandProperty Length) bytes"
          } else {
            echo "ERROR: Console executable not found"
            exit 1
          }

      - name: Create portable packages
        run: |
          # Create GUI portable package
          New-Item -ItemType Directory -Force -Path "ZedUpdater-GUI-Portable"
          Copy-Item "dist\ZedUpdater.exe" -Destination "ZedUpdater-GUI-Portable\"
          Copy-Item "config.example.json" -Destination "ZedUpdater-GUI-Portable\config.json"
          Copy-Item "README.md" -Destination "ZedUpdater-GUI-Portable\"
          Copy-Item "LICENSE" -Destination "ZedUpdater-GUI-Portable\"
          Copy-Item "CHANGELOG.md" -Destination "ZedUpdater-GUI-Portable\"
          Copy-Item "QUICK_START.md" -Destination "ZedUpdater-GUI-Portable\"

          # Create complete portable package
          New-Item -ItemType Directory -Force -Path "ZedUpdater-Complete-Portable"
          Copy-Item "dist\ZedUpdater.exe" -Destination "ZedUpdater-Complete-Portable\"
          Copy-Item "dist\ZedUpdater-Console.exe" -Destination "ZedUpdater-Complete-Portable\"
          Copy-Item "config.example.json" -Destination "ZedUpdater-Complete-Portable\config.json"
          Copy-Item "README.md" -Destination "ZedUpdater-Complete-Portable\"
          Copy-Item "LICENSE" -Destination "ZedUpdater-Complete-Portable\"
          Copy-Item "CHANGELOG.md" -Destination "ZedUpdater-Complete-Portable\"
          Copy-Item "QUICK_START.md" -Destination "ZedUpdater-Complete-Portable\"

      - name: Upload GUI executable artifact
        uses: actions/upload-artifact@v4
        with:
          name: ZedUpdater-Windows-GUI-${{ steps.version.outputs.version }}
          path: dist/ZedUpdater.exe
          retention-days: 30

      - name: Upload Console executable artifact
        uses: actions/upload-artifact@v4
        with:
          name: ZedUpdater-Windows-Console-${{ steps.version.outputs.version }}
          path: dist/ZedUpdater-Console.exe
          retention-days: 30

      - name: Upload GUI portable package
        uses: actions/upload-artifact@v4
        with:
          name: ZedUpdater-Windows-GUI-Portable-${{ steps.version.outputs.version }}
          path: ZedUpdater-GUI-Portable/
          retention-days: 30

      - name: Upload complete portable package
        uses: actions/upload-artifact@v4
        with:
          name: ZedUpdater-Windows-Complete-Portable-${{ steps.version.outputs.version }}
          path: ZedUpdater-Complete-Portable/
          retention-days: 30

  release:
    if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || (github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true')
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from build job
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION="${{ github.ref_name }}"
            VERSION_NUMBER="${VERSION#v}"
          elif [[ "${{ github.ref }}" == refs/heads/main || "${{ github.ref }}" == refs/heads/master ]]; then
            # Automatic release from main/master branch
            TIMESTAMP=$(date +%Y%m%d-%H%M%S)
            COMMIT_SHORT=$(echo "${{ github.sha }}" | cut -c1-8)
            VERSION="v1.0.0-dev.${TIMESTAMP}.${COMMIT_SHORT}"
            VERSION_NUMBER="1.0.0-dev.${TIMESTAMP}.${COMMIT_SHORT}"
          else
            VERSION="v1.0.0"
            VERSION_NUMBER="1.0.0"
          fi
          echo "tag=$VERSION" >> $GITHUB_OUTPUT
          echo "version=$VERSION_NUMBER" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create release archives
        run: |
          # Create ZIP archives for release
          cd ZedUpdater-Windows-GUI-${{ steps.version.outputs.version }}
          zip -r ../ZedUpdater-Windows-GUI-${{ steps.version.outputs.version }}.zip .
          cd ..

          cd ZedUpdater-Windows-Console-${{ steps.version.outputs.version }}
          zip -r ../ZedUpdater-Windows-Console-${{ steps.version.outputs.version }}.zip .
          cd ..

          cd ZedUpdater-Windows-GUI-Portable-${{ steps.version.outputs.version }}
          zip -r ../ZedUpdater-Windows-GUI-Portable-${{ steps.version.outputs.version }}.zip .
          cd ..

          cd ZedUpdater-Windows-Complete-Portable-${{ steps.version.outputs.version }}
          zip -r ../ZedUpdater-Windows-Complete-Portable-${{ steps.version.outputs.version }}.zip .
          cd ..

      - name: Generate changelog
        id: changelog
        run: |
          if [ -f "CHANGELOG.md" ]; then
            # Extract latest changes from CHANGELOG.md
            CHANGELOG=$(sed -n '/^## /,/^## /p' CHANGELOG.md | head -n -1 | tail -n +2)
            echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
            echo "$CHANGELOG" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "CHANGELOG=No changelog available." >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ZedUpdater-Windows-GUI-${{ steps.version.outputs.version }}.zip
            ZedUpdater-Windows-Console-${{ steps.version.outputs.version }}.zip
            ZedUpdater-Windows-GUI-Portable-${{ steps.version.outputs.version }}.zip
            ZedUpdater-Windows-Complete-Portable-${{ steps.version.outputs.version }}.zip
          tag_name: ${{ steps.version.outputs.tag }}
          name: "Zed Updater ${{ steps.version.outputs.tag }}"
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, 'dev') }}
          generate_release_notes: true
          body: |
            ## Zed Editor 自动更新程序 ${{ steps.version.outputs.tag }}

            ${{ contains(steps.version.outputs.version, 'dev') && '### 🚀 自动构建版本\n此版本由主分支推送自动生成，仅用于测试目的。\n\n' || '' }}### 下载说明
            - **ZedUpdater-Windows-GUI**: 图形界面版本（推荐）
            - **ZedUpdater-Windows-Console**: 控制台版本（用于脚本调用）
            - **ZedUpdater-Windows-GUI-Portable**: 便携版图形界面（包含配置文件）
            - **ZedUpdater-Windows-Complete-Portable**: 完整便携版（包含所有版本）

            ### 更新日志
            ${{ steps.changelog.outputs.CHANGELOG }}

            ### 系统要求
            - Windows 10 或更高版本
            - 无需安装 Python 环境

            ### 使用方法
            1. 下载对应的压缩包
            2. 解压到任意目录
            3. 运行 ZedUpdater.exe
            4. 按照界面提示配置 Zed 安装路径

            ${{ contains(steps.version.outputs.version, 'dev') && '\n\n---\n*此自动构建版本基于提交: ${{ github.sha }}*' || '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
