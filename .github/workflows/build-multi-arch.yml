name: Build Multi-Architecture Zed Updater

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [created]
  workflow_dispatch:

env:
  GO_VERSION: "1.21"
  PYTHON_VERSION: "3.11"

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      legacy-changed: ${{ steps.changes.outputs.legacy }}
      modern-changed: ${{ steps.changes.outputs.modern }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            legacy:
              - 'legacy/**'
              - 'scripts/start-legacy.*'
            modern:
              - 'modern/**'
              - 'scripts/start-modern.*'
              - 'scripts/Makefile'

  build-legacy:
    name: Build Legacy Implementation
    runs-on: ${{ matrix.os }}
    needs: detect-changes
    if: needs.detect-changes.outputs.legacy-changed == 'true' || github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        os: [windows-latest]
        python-version: ["3.11"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache Python packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-legacy-${{ matrix.python-version }}-${{ hashFiles('legacy/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-legacy-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-legacy-

      - name: Install Python dependencies (Legacy)
        working-directory: ./legacy
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install PyInstaller
        run: pip install pyinstaller

      - name: Test Legacy Application (Linux/macOS)
        if: runner.os != 'Windows'
        working-directory: ./legacy
        run: |
          python -c "import PyQt5.QtWidgets; print('PyQt5 available')"
          python -c "import requests; print('requests available')"
          python -m py_compile main.py

      - name: Test Legacy Application (Windows)
        if: runner.os == 'Windows'
        working-directory: ./legacy
        run: |
          python -c "import PyQt5.QtWidgets; print('PyQt5 available')"
          python -c "import requests; print('requests available')"
          python -m py_compile main.py

      - name: Build Legacy Executable (Linux)
        if: runner.os == 'Linux'
        working-directory: ./legacy
        run: |
          pyinstaller --onefile --windowed --name zed-updater-legacy-linux-py${{ matrix.python-version }} main.py

      - name: Build Legacy Executable (Windows)
        if: runner.os == 'Windows'
        working-directory: ./legacy
        run: |
          pyinstaller --onefile --windowed --name zed-updater-legacy-windows-py${{ matrix.python-version }} main.py

      - name: Build Legacy Executable (macOS)
        if: runner.os == 'macOS'
        working-directory: ./legacy
        run: |
          pyinstaller --onefile --windowed --name zed-updater-legacy-macos-py${{ matrix.python-version }} main.py

      - name: Upload Legacy Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: legacy-executables-${{ matrix.os }}-py${{ matrix.python-version }}
          path: |
            legacy/dist/zed-updater-legacy-*
          retention-days: 30

  build-modern-backend:
    name: Build Modern Backend (Go)
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.modern-changed == 'true' || github.event_name == 'release' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-modern-${{ hashFiles('modern/backend/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-modern-

      - name: Download Go dependencies
        working-directory: ./modern/backend
        run: go mod download

      - name: Verify Go dependencies
        working-directory: ./modern/backend
        run: go mod verify

      - name: Run Go tests
        working-directory: ./modern/backend
        run: go test -v ./...

      - name: Run Go linting
        working-directory: ./modern/backend
        run: |
          go fmt ./...
          go vet ./...

      - name: Build Go binary for Linux (amd64)
        working-directory: ./modern/backend
        run: |
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o zed-updater-backend-linux-amd64 .

      - name: Build Go binary for Linux (arm64)
        working-directory: ./modern/backend
        run: |
          CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -o zed-updater-backend-linux-arm64 .

      - name: Build Go binary for Windows (amd64)
        working-directory: ./modern/backend
        run: |
          CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -o zed-updater-backend-windows-amd64.exe .

      - name: Build Go binary for Windows (arm64)
        working-directory: ./modern/backend
        run: |
          CGO_ENABLED=0 GOOS=windows GOARCH=arm64 go build -o zed-updater-backend-windows-arm64.exe .

      - name: Build Go binary for macOS (amd64)
        working-directory: ./modern/backend
        run: |
          CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -o zed-updater-backend-darwin-amd64 .

      - name: Build Go binary for macOS (arm64)
        working-directory: ./modern/backend
        run: |
          CGO_ENABLED=0 GOOS=darwin GOARCH=arm64 go build -o zed-updater-backend-darwin-arm64 .

      - name: Upload Go Backend Binaries
        uses: actions/upload-artifact@v4
        with:
          name: modern-backend-binaries
          path: |
            modern/backend/zed-updater-backend-*
          retention-days: 30

  build-modern-frontend:
    name: Build Modern Frontend (PyQt5)
    runs-on: ${{ matrix.os }}
    needs: detect-changes
    if: needs.detect-changes.outputs.modern-changed == 'true' || github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        os: [windows-latest]
        python-version: ["3.11"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache Python packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-modern-${{ matrix.python-version }}-${{ hashFiles('modern/frontend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-modern-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-modern-

      - name: Install Python dependencies (Modern)
        working-directory: ./modern/frontend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install PyInstaller
        run: pip install pyinstaller

      - name: Test Modern Frontend (Linux/macOS)
        if: runner.os != 'Windows'
        working-directory: ./modern/frontend
        run: |
          python -c "import PyQt5.QtWidgets; print('PyQt5 available')"
          python -c "import requests; print('requests available')"
          python -m py_compile main.py

      - name: Test Modern Frontend (Windows)
        if: runner.os == 'Windows'
        working-directory: ./modern/frontend
        run: |
          python -c "import PyQt5.QtWidgets; print('PyQt5 available')"
          python -c "import requests; print('requests available')"
          python -m py_compile main.py

      - name: Build Modern Frontend Executable (Linux)
        if: runner.os == 'Linux'
        working-directory: ./modern/frontend
        run: |
          pyinstaller --onefile --windowed --name zed-updater-modern-gui-linux-py${{ matrix.python-version }} main.py

      - name: Build Modern Frontend Executable (Windows)
        if: runner.os == 'Windows'
        working-directory: ./modern/frontend
        run: |
          pyinstaller --onefile --windowed --name zed-updater-modern-gui-windows-py${{ matrix.python-version }} main.py

      - name: Build Modern Frontend Executable (macOS)
        if: runner.os == 'macOS'
        working-directory: ./modern/frontend
        run: |
          pyinstaller --onefile --windowed --name zed-updater-modern-gui-macos-py${{ matrix.python-version }} main.py

      - name: Upload Modern Frontend Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: modern-frontend-executables-${{ matrix.os }}-py${{ matrix.python-version }}
          path: |
            modern/frontend/dist/zed-updater-modern-gui-*
          retention-days: 30

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build-modern-backend, build-modern-frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Go dependencies
        working-directory: ./modern/backend
        run: go mod download

      - name: Install Python dependencies
        working-directory: ./modern/frontend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Start Go backend in background
        working-directory: ./modern/backend
        run: |
          go run main.go &
          echo $! > backend.pid
          sleep 10

      - name: Test backend health endpoint
        run: |
          curl -f http://localhost:8080/api/v1/health || exit 1

      - name: Test backend API endpoints
        run: |
          curl -f http://localhost:8080/api/v1/system/info || exit 1
          curl -f http://localhost:8080/api/v1/updates/check || exit 1

      - name: Run integration tests
        run: |
          if [ -f "test_integration.py" ]; then
            python test_integration.py
          fi

      - name: Stop backend
        run: |
          if [ -f "modern/backend/backend.pid" ]; then
            kill $(cat modern/backend/backend.pid) || true
          fi

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: detect-changes
    if: github.event_name == 'push' || github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      - name: Set up Go for security scan
        if: needs.detect-changes.outputs.modern-changed == 'true'
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run gosec Security Scanner
        if: needs.detect-changes.outputs.modern-changed == 'true'
        run: |
          go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
          gosec -fmt sarif -out gosec-results.sarif ./modern/backend/...

  package-release:
    name: Package Release
    runs-on: ubuntu-latest
    needs:
      [
        build-legacy,
        build-modern-backend,
        build-modern-frontend,
        integration-test,
      ]
    if: github.event_name == 'release'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create release directory structure
        run: |
          mkdir -p release/legacy
          mkdir -p release/modern/backend
          mkdir -p release/modern/frontend
          mkdir -p release/scripts
          mkdir -p release/docs

      - name: Organize legacy artifacts
        run: |
          find artifacts -name "*legacy*" -type f -exec cp {} release/legacy/ \;

      - name: Organize modern backend artifacts
        run: |
          find artifacts -name "*backend*" -type f -exec cp {} release/modern/backend/ \;

      - name: Organize modern frontend artifacts
        run: |
          find artifacts -name "*modern-gui*" -type f -exec cp {} release/modern/frontend/ \;

      - name: Copy scripts and documentation
        run: |
          cp scripts/* release/scripts/
          cp *.md release/docs/
          cp LICENSE release/
          cp config.example.json release/

      - name: Create version info file
        run: |
          echo "Zed Update Manager Release ${{ github.ref_name }}" > release/VERSION.txt
          echo "Build Date: $(date -u)" >> release/VERSION.txt
          echo "Git Commit: ${{ github.sha }}" >> release/VERSION.txt
          echo "" >> release/VERSION.txt
          echo "Legacy Implementation:" >> release/VERSION.txt
          echo "- Original PyQt5 standalone application" >> release/VERSION.txt
          echo "- Single executable file" >> release/VERSION.txt
          echo "- Compatible with older systems" >> release/VERSION.txt
          echo "" >> release/VERSION.txt
          echo "Modern Implementation:" >> release/VERSION.txt
          echo "- Go backend + PyQt5 frontend" >> release/VERSION.txt
          echo "- Microservices architecture" >> release/VERSION.txt
          echo "- Enhanced performance and scalability" >> release/VERSION.txt

      - name: Create release archives
        run: |
          cd release
          tar -czf ../zed-updater-${{ github.ref_name }}-complete.tar.gz .
          zip -r ../zed-updater-${{ github.ref_name }}-complete.zip .

          # Create separate archives for each implementation
          tar -czf ../zed-updater-${{ github.ref_name }}-legacy-only.tar.gz legacy/ scripts/start-legacy.* docs/
          tar -czf ../zed-updater-${{ github.ref_name }}-modern-only.tar.gz modern/ scripts/start-modern.* scripts/Makefile docs/

      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            zed-updater-${{ github.ref_name }}-complete.tar.gz
            zed-updater-${{ github.ref_name }}-complete.zip
            zed-updater-${{ github.ref_name }}-legacy-only.tar.gz
            zed-updater-${{ github.ref_name }}-modern-only.tar.gz
          body: |
            ## Zed Update Manager Release ${{ github.ref_name }}

            This release includes both **Legacy** and **Modern** implementations:

            ### 🏛️ Legacy Implementation
            - **Technology**: Pure PyQt5 standalone application
            - **Compatibility**: Works on older systems
            - **Installation**: Single executable file
            - **Use Case**: Simple deployment, minimal dependencies

            ### 🚀 Modern Implementation
            - **Technology**: Go backend + PyQt5 frontend
            - **Architecture**: Microservices design
            - **Performance**: Enhanced speed and scalability
            - **Features**: Real-time API communication, better error handling

            ### 📦 Available Downloads

            - **Complete Package**: Contains both implementations
              - `zed-updater-${{ github.ref_name }}-complete.tar.gz`
              - `zed-updater-${{ github.ref_name }}-complete.zip`

            - **Legacy Only**: Traditional standalone application
              - `zed-updater-${{ github.ref_name }}-legacy-only.tar.gz`

            - **Modern Only**: Go + PyQt5 architecture
              - `zed-updater-${{ github.ref_name }}-modern-only.tar.gz`

            ### 🔧 Quick Start

            **Legacy Implementation:**
            ```bash
            # Windows
            scripts/start-legacy.bat

            # Linux/macOS
            chmod +x scripts/start-legacy.sh
            ./scripts/start-legacy.sh
            ```

            **Modern Implementation:**
            ```bash
            # Windows
            scripts/start-modern.bat

            # Linux/macOS
            chmod +x scripts/start-modern.sh
            ./scripts/start-modern.sh
            ```

            ### 🔧 System Requirements

            **Legacy Implementation:**
            - Python 3.9+
            - PyQt5
            - 50MB disk space

            **Modern Implementation:**
            - Python 3.9+ (for frontend)
            - Go 1.21+ (for backend)
            - PyQt5
            - 100MB disk space

            ### 📊 Supported Platforms

            - ✅ Windows 10/11 (x64, ARM64)
            - ✅ macOS 10.14+ (Intel, Apple Silicon)
            - ✅ Linux (x64, ARM64)

            ### 🆘 Support

            - 📖 Documentation: Check the `docs/` folder
            - 🐛 Issues: [GitHub Issues](https://github.com/${{ github.repository }}/issues)
            - 💬 Discussions: [GitHub Discussions](https://github.com/${{ github.repository }}/discussions)
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [package-release]
    if: always()

    steps:
      - name: Delete old artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          name: |
            legacy-executables-*
            modern-backend-binaries
            modern-frontend-executables-*
          failOnError: false
