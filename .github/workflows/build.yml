name: Build Go Backend and Python GUI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

jobs:
  build-backend:
    name: Build Go Backend
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('backend/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download Go dependencies
      working-directory: ./backend
      run: go mod download

    - name: Verify Go dependencies
      working-directory: ./backend
      run: go mod verify

    - name: Run Go tests
      working-directory: ./backend
      run: go test -v ./...

    - name: Build Go binary for Linux
      working-directory: ./backend
      run: |
        CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o zed-update-backend-linux-amd64 .

    - name: Build Go binary for Windows
      working-directory: ./backend
      run: |
        CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -o zed-update-backend-windows-amd64.exe .

    - name: Build Go binary for macOS
      working-directory: ./backend
      run: |
        CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -o zed-update-backend-darwin-amd64 .
        CGO_ENABLED=0 GOOS=darwin GOARCH=arm64 go build -o zed-update-backend-darwin-arm64 .

    - name: Upload Go binaries
      uses: actions/upload-artifact@v3
      with:
        name: go-binaries
        path: |
          backend/zed-update-backend-*
        retention-days: 30

  build-frontend:
    name: Build Python GUI
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache Python packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('frontend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      working-directory: ./frontend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install PyInstaller
      run: pip install pyinstaller

    - name: Test Python application (Linux/macOS)
      if: runner.os != 'Windows'
      working-directory: ./frontend
      run: |
        python -c "import tkinter; print('tkinter available')"
        python -c "import requests; print('requests available')"

    - name: Test Python application (Windows)
      if: runner.os == 'Windows'
      working-directory: ./frontend
      run: |
        python -c "import tkinter; print('tkinter available')"
        python -c "import requests; print('requests available')"

    - name: Build executable with PyInstaller (Linux)
      if: runner.os == 'Linux'
      working-directory: ./frontend
      run: |
        pyinstaller --onefile --windowed --name zed-update-gui-linux main.py

    - name: Build executable with PyInstaller (Windows)
      if: runner.os == 'Windows'
      working-directory: ./frontend
      run: |
        pyinstaller --onefile --windowed --name zed-update-gui-windows main.py

    - name: Build executable with PyInstaller (macOS)
      if: runner.os == 'macOS'
      working-directory: ./frontend
      run: |
        pyinstaller --onefile --windowed --name zed-update-gui-macos main.py

    - name: Upload Python executables
      uses: actions/upload-artifact@v3
      with:
        name: python-executables-${{ matrix.os }}-py${{ matrix.python-version }}
        path: |
          frontend/dist/zed-update-gui-*
        retention-days: 30

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]

    services:
      backend:
        image: ubuntu:latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Download Go dependencies
      working-directory: ./backend
      run: go mod download

    - name: Install Python dependencies
      working-directory: ./frontend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest

    - name: Start Go backend in background
      working-directory: ./backend
      run: |
        go run main.go &
        sleep 5

    - name: Test backend health endpoint
      run: |
        curl -f http://localhost:8080/api/v1/health || exit 1

    - name: Test backend API endpoints
      run: |
        curl -f http://localhost:8080/api/v1/system/info || exit 1
        curl -f http://localhost:8080/api/v1/updates/check || exit 1

  package-release:
    name: Package Release
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend, integration-test]
    if: github.event_name == 'release'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: ./artifacts

    - name: Create release directory
      run: |
        mkdir -p release
        mkdir -p release/backend
        mkdir -p release/frontend

    - name: Copy backend binaries
      run: |
        cp artifacts/go-binaries/* release/backend/

    - name: Copy frontend executables
      run: |
        find artifacts -name "*gui*" -type f -exec cp {} release/frontend/ \;

    - name: Create release archive
      run: |
        tar -czf zed-update-${{ github.ref_name }}.tar.gz -C release .
        zip -r zed-update-${{ github.ref_name }}.zip release/

    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          zed-update-${{ github.ref_name }}.tar.gz
          zed-update-${{ github.ref_name }}.zip
        body: |
          ## Zed Update Manager Release ${{ github.ref_name }}

          ### Backend (Go)
          - Cross-platform HTTP API server
          - Update checking and management
          - System information endpoints

          ### Frontend (Python GUI)
          - Cross-platform desktop application
          - Real-time backend integration
          - Progress tracking and logging

          ### Installation
          1. Download the appropriate backend binary for your platform
          2. Download the frontend executable for your platform
          3. Start the backend server first
          4. Run the frontend GUI application

          ### Supported Platforms
          - Linux (amd64)
          - Windows (amd64)
          - macOS (amd64, arm64)
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
